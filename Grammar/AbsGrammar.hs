-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Grammar.AbsGrammar where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Prog = Prog [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = SDef Ident Expr
    | SEmpty
    | SBlock Block
    | SAss Ident Expr
    | SRet Expr
    | SVRet
    | SIf Expr Block
    | SIfElse Expr Block IfCont
    | SWhile Expr Block
    | SExpr Expr
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data IfCont
    = SElif Expr Block | SElifElse Expr Block IfCont | SElse Block
  deriving (Eq, Ord, Show, Read)

data Type = TVoid | TInt | TStr | TBool | TFunc [ParType] Type
  deriving (Eq, Ord, Show, Read)

data ParType = ValPar Type | VarPar Type
  deriving (Eq, Ord, Show, Read)

data AddOp = OPlus | OMinus
  deriving (Eq, Ord, Show, Read)

data MulOp = OTimes | ODiv | OMod
  deriving (Eq, Ord, Show, Read)

data RelOp = OLt | OLte | OGt | OGte | OEq | ONeq
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | EInt Integer
    | ETrue
    | EFalse
    | EStr String
    | EFunc [Arg] Type Block
    | EApp Expr [Expr]
    | ENeg Expr
    | ENot Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Ident ParType
  deriving (Eq, Ord, Show, Read)

