module Grammar.SkelGrammar where

-- Haskell module generated by the BNF converter

import Grammar.AbsGrammar
import Grammar.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProg :: Prog -> Result
transProg x = case x of
  Prog stmts -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  SDef ident expr -> failure x
  SEmpty -> failure x
  SBlock block -> failure x
  SAss ident expr -> failure x
  SRet expr -> failure x
  SVRet -> failure x
  SIf expr block -> failure x
  SIfElse expr block ifcont -> failure x
  SWhile expr block -> failure x
  SExpr expr -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  Block stmts -> failure x
transIfCont :: IfCont -> Result
transIfCont x = case x of
  SElif expr block -> failure x
  SElifElse expr block ifcont -> failure x
  SElse block -> failure x
transType :: Type -> Result
transType x = case x of
  TVoid -> failure x
  TInt -> failure x
  TStr -> failure x
  TBool -> failure x
  TFunc partypes type_ -> failure x
transParType :: ParType -> Result
transParType x = case x of
  ValPar type_ -> failure x
  VarPar type_ -> failure x
transAddOp :: AddOp -> Result
transAddOp x = case x of
  OPlus -> failure x
  OMinus -> failure x
transMulOp :: MulOp -> Result
transMulOp x = case x of
  OTimes -> failure x
  ODiv -> failure x
  OMod -> failure x
transRelOp :: RelOp -> Result
transRelOp x = case x of
  OLt -> failure x
  OLte -> failure x
  OGt -> failure x
  OGte -> failure x
  OEq -> failure x
  ONeq -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EVar ident -> failure x
  EInt integer -> failure x
  ETrue -> failure x
  EFalse -> failure x
  EStr string -> failure x
  EFunc args type_ block -> failure x
  EApp expr exprs -> failure x
  ENeg expr -> failure x
  ENot expr -> failure x
  EMul expr1 mulop expr2 -> failure x
  EAdd expr1 addop expr2 -> failure x
  ERel expr1 relop expr2 -> failure x
  EAnd expr1 expr2 -> failure x
  EOr expr1 expr2 -> failure x
transArg :: Arg -> Result
transArg x = case x of
  Arg ident partype -> failure x

